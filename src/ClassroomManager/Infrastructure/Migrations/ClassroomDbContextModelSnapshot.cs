// <auto-generated />
using App.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace App.Infrastructure.Migrations
{
    [DbContext(typeof(ClassroomDbContext))]
    partial class ClassroomDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("App.Core.Entities.Assignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AttachmentId");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("Grade");

                    b.Property<string>("ImageUrl");

                    b.Property<long>("LessonId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PublishStatus")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("LessonId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("App.Core.Entities.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<long>("TeacherId");

                    b.Property<string>("TeacherId1");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("TeacherId1");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("App.Core.Entities.FileLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FileUrl")
                        .IsRequired();

                    b.Property<long>("LessonId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("App.Core.Entities.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CourseId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PublishStatus")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Summary")
                        .IsRequired();

                    b.Property<long>("TeacherId");

                    b.Property<string>("TeacherId1");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId1");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("App.Core.Entities.LessonSection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ImageUrl");

                    b.Property<long>("LessonId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PublishStatus")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonSections");
                });

            modelBuilder.Entity("App.Core.Entities.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine")
                        .HasMaxLength(50);

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DoB");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("GradeLevel")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32);

                    b.Property<string>("PhoneNumberOpt")
                        .HasMaxLength(32);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("State")
                        .HasMaxLength(15);

                    b.Property<long>("TeacherId");

                    b.Property<string>("TeacherId1");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Zip")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("TeacherId1");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("App.Core.Entities.StudentLesson", b =>
                {
                    b.Property<long>("StudentId");

                    b.Property<long>("LessonId");

                    b.HasKey("StudentId", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("StudentLesson");
                });

            modelBuilder.Entity("App.Core.Entities.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("App.Core.Entities.Assignment", b =>
                {
                    b.HasOne("App.Core.Entities.FileLink", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId");

                    b.HasOne("App.Core.Entities.Lesson", "Lesson")
                        .WithMany("Assignments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Entities.Course", b =>
                {
                    b.HasOne("App.Core.Entities.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId1");
                });

            modelBuilder.Entity("App.Core.Entities.FileLink", b =>
                {
                    b.HasOne("App.Core.Entities.Lesson", "Lesson")
                        .WithMany("Attachments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Entities.Lesson", b =>
                {
                    b.HasOne("App.Core.Entities.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Entities.Teacher", "Teacher")
                        .WithMany("Lessons")
                        .HasForeignKey("TeacherId1");
                });

            modelBuilder.Entity("App.Core.Entities.LessonSection", b =>
                {
                    b.HasOne("App.Core.Entities.Lesson", "Lesson")
                        .WithMany("Sections")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Entities.Student", b =>
                {
                    b.HasOne("App.Core.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId1");
                });

            modelBuilder.Entity("App.Core.Entities.StudentLesson", b =>
                {
                    b.HasOne("App.Core.Entities.Lesson", "Lesson")
                        .WithMany("StudentLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Entities.Student", "Student")
                        .WithMany("StudentLessons")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
